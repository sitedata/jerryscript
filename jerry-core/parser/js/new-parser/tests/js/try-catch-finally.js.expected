
--- Script parsing start ---

  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  3] CBC_EXT_TRY_CREATE_CONTEXT
  [  4] CBC_PUSH_LITERAL idx:1->ident(x)
  [  3] CBC_CALL0_BLOCK
  [  3] CBC_EXT_FINALLY
  [  4] CBC_PUSH_LITERAL idx:1->ident(x)
  [  3] CBC_CALL0_BLOCK
  [  0] CBC_CONTEXT_END
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  3] CBC_EXT_TRY_CREATE_CONTEXT
  [  4] CBC_PUSH_LITERAL idx:1->ident(x)
  [  3] CBC_CALL0_BLOCK
  [  4] CBC_EXT_CATCH
  [  3] CBC_ASSIGN_SET_IDENT idx:2->ident(exc)
  [  4] CBC_PUSH_LITERAL idx:1->ident(x)
  [  3] CBC_CALL0_BLOCK
  [  3] CBC_EXT_FINALLY
  [  4] CBC_PUSH_LITERAL idx:1->ident(x)
  [  3] CBC_CALL0_BLOCK
  [  0] CBC_CONTEXT_END
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  3] CBC_EXT_TRY_CREATE_CONTEXT
  [  4] CBC_PUSH_LITERAL idx:1->ident(x)
  [  3] CBC_CALL0_BLOCK
  [  4] CBC_EXT_CATCH
  [  3] CBC_ASSIGN_SET_IDENT idx:2->ident(exc)
  [  4] CBC_PUSH_LITERAL idx:1->ident(x)
  [  3] CBC_CALL0_BLOCK
  [  0] CBC_CONTEXT_END
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  3] CBC_EXT_TRY_CREATE_CONTEXT
  [  3] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  3] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  3] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  3] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  4] CBC_EXT_CATCH
  [  3] CBC_ASSIGN_SET_IDENT idx:3->ident(evall)
  [  3] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  3] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  3] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  3] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  3] CBC_EXT_FINALLY
  [  3] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  3] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  3] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  3] CBC_JUMP_FORWARD_EXIT_CONTEXT
  [  0] CBC_CONTEXT_END
  [  1] CBC_PUSH_FALSE
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

--- Function parsing start ---

  [  1] CBC_PUSH_NUMBER_POS_BYTE number:1
  [  0] CBC_ASSIGN_SET_IDENT idx:0->var_ident(e)
  [  1] CBC_PUSH_NUMBER_POS_BYTE number:2
  [  0] CBC_ASSIGN_SET_IDENT idx:1->var_ident(f)
  [  3] CBC_EXT_TRY_CREATE_CONTEXT
  [  4] CBC_EXT_CATCH
  [  3] CBC_ASSIGN_SET_IDENT idx:0->var_ident(e)
  [  0] CBC_CONTEXT_END

Final byte code dump:

  Maximum stack depth: 5
  Flags: [small_lit_enc]
  Argument range end: 0
  Register range end: 1
  Identifier range end: 2
  Const literal range end: 2
  Literal range end: 2

   0 : CBC_DEFINE_VARS from: 1 to: 1
         idx:1(ident)->var_ident(e)
   2 : CBC_PUSH_NUMBER_POS_BYTE number:1
   4 : CBC_ASSIGN_SET_IDENT idx:1(ident)->var_ident(e)
   6 : CBC_PUSH_NUMBER_POS_BYTE number:2
   8 : CBC_ASSIGN_SET_IDENT idx:0(reg)->var_ident(f)
  10 : CBC_EXT_TRY_CREATE_CONTEXT offset:3(->13)
  13 : CBC_EXT_CATCH offset:5(->18)
  16 : CBC_ASSIGN_SET_IDENT idx:1(ident)->var_ident(e)
  18 : CBC_CONTEXT_END
  19 : CBC_RETURN_WITH_BLOCK

Byte code size: 20 bytes

--- Function parsing end ---


Final byte code dump:

  Maximum stack depth: 4
  Flags: [small_lit_enc]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 5
  Const literal range end: 5
  Literal range end: 6

   0 : CBC_INITIALIZE_VAR idx:0(ident)->var_ident(f) idx:5(lit)->function
   3 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
   5 : CBC_POP_BLOCK
   6 : CBC_EXT_TRY_CREATE_CONTEXT offset:6(->12)
   9 : CBC_PUSH_LITERAL idx:2(ident)->ident(x)
  11 : CBC_CALL0_BLOCK
  12 : CBC_EXT_FINALLY offset:7(->19)
  15 : CBC_PUSH_LITERAL idx:2(ident)->ident(x)
  17 : CBC_CALL0_BLOCK
  18 : CBC_CONTEXT_END
  19 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
  21 : CBC_POP_BLOCK
  22 : CBC_EXT_TRY_CREATE_CONTEXT offset:6(->28)
  25 : CBC_PUSH_LITERAL idx:2(ident)->ident(x)
  27 : CBC_CALL0_BLOCK
  28 : CBC_EXT_CATCH offset:8(->36)
  31 : CBC_ASSIGN_SET_IDENT idx:3(ident)->ident(exc)
  33 : CBC_PUSH_LITERAL idx:2(ident)->ident(x)
  35 : CBC_CALL0_BLOCK
  36 : CBC_EXT_FINALLY offset:7(->43)
  39 : CBC_PUSH_LITERAL idx:2(ident)->ident(x)
  41 : CBC_CALL0_BLOCK
  42 : CBC_CONTEXT_END
  43 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
  45 : CBC_POP_BLOCK
  46 : CBC_EXT_TRY_CREATE_CONTEXT offset:6(->52)
  49 : CBC_PUSH_LITERAL idx:2(ident)->ident(x)
  51 : CBC_CALL0_BLOCK
  52 : CBC_EXT_CATCH offset:8(->60)
  55 : CBC_ASSIGN_SET_IDENT idx:3(ident)->ident(exc)
  57 : CBC_PUSH_LITERAL idx:2(ident)->ident(x)
  59 : CBC_CALL0_BLOCK
  60 : CBC_CONTEXT_END
  61 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
  63 : CBC_POP_BLOCK
  64 : CBC_JUMP_FORWARD offset:38(->102)
  66 : CBC_EXT_TRY_CREATE_CONTEXT offset:11(->77)
  69 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:33(->102)
  71 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:31(->102)
  73 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:32(->105)
  75 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:30(->105)
  77 : CBC_EXT_CATCH offset:13(->90)
  80 : CBC_ASSIGN_SET_IDENT idx:4(ident)->ident(evall)
  82 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:20(->102)
  84 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:18(->102)
  86 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:19(->105)
  88 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:17(->105)
  90 : CBC_EXT_FINALLY offset:12(->102)
  93 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:9(->102)
  95 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:7(->102)
  97 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:8(->105)
  99 : CBC_JUMP_FORWARD_EXIT_CONTEXT offset:6(->105)
 101 : CBC_CONTEXT_END
 102 : CBC_PUSH_FALSE
 103 : CBC_BRANCH_IF_TRUE_BACKWARD offset:37(->66)
 105 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
 107 : CBC_POP_BLOCK
 108 : CBC_RETURN_WITH_BLOCK

Byte code size: 109 bytes

Script parsing successfully completed. Total byte code size: 129 bytes

--- Script parsing end ---

