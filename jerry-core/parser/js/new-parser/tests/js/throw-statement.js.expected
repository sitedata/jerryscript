
--- Script parsing start ---

  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:1->ident(exp)
  [  0] CBC_THROW
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_ADD_TWO_LITERALS idx:2->ident(a) idx:3->ident(b)
  [  0] CBC_THROW
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_MULTIPLY_TWO_LITERALS idx:4->ident(c) idx:5->ident(d)
  [  0] CBC_THROW
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 1
  Flags: [small_lit_enc]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 6
  Const literal range end: 6
  Literal range end: 6

   0 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
   2 : CBC_POP_BLOCK
   3 : CBC_PUSH_LITERAL idx:1(ident)->ident(exp)
   5 : CBC_THROW
   6 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
   8 : CBC_POP_BLOCK
   9 : CBC_ADD_TWO_LITERALS idx:2(ident)->ident(a) idx:3(ident)->ident(b)
  12 : CBC_THROW
  13 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  15 : CBC_POP_BLOCK
  16 : CBC_MULTIPLY_TWO_LITERALS idx:4(ident)->ident(c) idx:5(ident)->ident(d)
  19 : CBC_THROW
  20 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  22 : CBC_POP_BLOCK
  23 : CBC_RETURN_WITH_BLOCK

Byte code size: 24 bytes

Script parsing successfully completed. Total byte code size: 24 bytes

--- Script parsing end ---

