
--- Script parsing start ---

  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_LITERAL idx:2->ident(b)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_LITERAL idx:3->ident(c)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_LITERAL idx:4->ident(d)
  [  0] CBC_CALL0_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:2->ident(b)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_LITERAL idx:3->ident(c)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:4->ident(d)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_LITERAL idx:5->ident(e)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:6->ident(f)
  [  0] CBC_CALL0_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_LITERAL idx:2->ident(b)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_LITERAL idx:3->ident(c)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_LITERAL idx:4->ident(d)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:5->ident(e)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:6->ident(f)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_LITERAL idx:7->ident(g)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:8->ident(h)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:9->ident(i)
  [  0] CBC_CALL0_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  0] CBC_POST_INCR_IDENT_BLOCK idx:10->ident(x)
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  0] CBC_POST_INCR_IDENT_BLOCK idx:10->ident(x)
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_POST_INCR_IDENT_BLOCK idx:11->ident(y)
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_POST_INCR_IDENT_BLOCK idx:11->ident(y)
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 1
  Flags: [small_lit_enc]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 12
  Const literal range end: 12
  Literal range end: 12

   0 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
   2 : CBC_POP_BLOCK
   3 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
   5 : CBC_BRANCH_IF_FALSE_FORWARD offset:13(->18)
   7 : CBC_PUSH_LITERAL idx:2(ident)->ident(b)
   9 : CBC_BRANCH_IF_FALSE_FORWARD offset:9(->18)
  11 : CBC_PUSH_LITERAL idx:3(ident)->ident(c)
  13 : CBC_BRANCH_IF_FALSE_FORWARD offset:5(->18)
  15 : CBC_PUSH_LITERAL idx:4(ident)->ident(d)
  17 : CBC_CALL0_BLOCK
  18 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  20 : CBC_POP_BLOCK
  21 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
  23 : CBC_BRANCH_IF_FALSE_FORWARD offset:4(->27)
  25 : CBC_JUMP_FORWARD offset:23(->48)
  27 : CBC_PUSH_LITERAL idx:2(ident)->ident(b)
  29 : CBC_BRANCH_IF_FALSE_FORWARD offset:7(->36)
  31 : CBC_PUSH_LITERAL idx:3(ident)->ident(c)
  33 : CBC_CALL0_BLOCK
  34 : CBC_JUMP_FORWARD offset:14(->48)
  36 : CBC_PUSH_LITERAL idx:4(ident)->ident(d)
  38 : CBC_BRANCH_IF_FALSE_FORWARD offset:7(->45)
  40 : CBC_PUSH_LITERAL idx:5(ident)->ident(e)
  42 : CBC_CALL0_BLOCK
  43 : CBC_JUMP_FORWARD offset:5(->48)
  45 : CBC_PUSH_LITERAL idx:6(ident)->ident(f)
  47 : CBC_CALL0_BLOCK
  48 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  50 : CBC_POP_BLOCK
  51 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
  53 : CBC_BRANCH_IF_FALSE_FORWARD offset:34(->87)
  55 : CBC_PUSH_LITERAL idx:2(ident)->ident(b)
  57 : CBC_BRANCH_IF_FALSE_FORWARD offset:16(->73)
  59 : CBC_PUSH_LITERAL idx:3(ident)->ident(c)
  61 : CBC_BRANCH_IF_FALSE_FORWARD offset:7(->68)
  63 : CBC_PUSH_LITERAL idx:4(ident)->ident(d)
  65 : CBC_CALL0_BLOCK
  66 : CBC_JUMP_FORWARD offset:5(->71)
  68 : CBC_PUSH_LITERAL idx:5(ident)->ident(e)
  70 : CBC_CALL0_BLOCK
  71 : CBC_JUMP_FORWARD offset:14(->85)
  73 : CBC_PUSH_LITERAL idx:6(ident)->ident(f)
  75 : CBC_BRANCH_IF_FALSE_FORWARD offset:7(->82)
  77 : CBC_PUSH_LITERAL idx:7(ident)->ident(g)
  79 : CBC_CALL0_BLOCK
  80 : CBC_JUMP_FORWARD offset:5(->85)
  82 : CBC_PUSH_LITERAL idx:8(ident)->ident(h)
  84 : CBC_CALL0_BLOCK
  85 : CBC_JUMP_FORWARD offset:5(->90)
  87 : CBC_PUSH_LITERAL idx:9(ident)->ident(i)
  89 : CBC_CALL0_BLOCK
  90 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  92 : CBC_POP_BLOCK
  93 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
  95 : CBC_BRANCH_IF_FALSE_FORWARD offset:2(->97)
  97 : CBC_POST_INCR_IDENT_BLOCK idx:10(ident)->ident(x)
  99 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
 101 : CBC_BRANCH_IF_FALSE_FORWARD offset:2(->103)
 103 : CBC_POST_INCR_IDENT_BLOCK idx:10(ident)->ident(x)
 105 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
 107 : CBC_POP_BLOCK
 108 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
 110 : CBC_BRANCH_IF_FALSE_FORWARD offset:2(->112)
 112 : CBC_POST_INCR_IDENT_BLOCK idx:11(ident)->ident(y)
 114 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
 116 : CBC_BRANCH_IF_FALSE_FORWARD offset:2(->118)
 118 : CBC_POST_INCR_IDENT_BLOCK idx:11(ident)->ident(y)
 120 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
 122 : CBC_POP_BLOCK
 123 : CBC_RETURN_WITH_BLOCK

Byte code size: 124 bytes

Script parsing successfully completed. Total byte code size: 124 bytes

--- Script parsing end ---

