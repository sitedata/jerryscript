
--- Script parsing start ---

  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_PROP_LITERAL_LITERAL idx:1->ident(a) idx:2->string(b)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_PROP_LITERAL_LITERAL idx:1->ident(a) idx:3->ident(x)
  [  0] CBC_POP_BLOCK
  [  3] CBC_PUSH_THREE_LITERALS idx:1->ident(a) idx:3->ident(x) idx:4->ident(y)
  [  2] CBC_ADD
  [  1] CBC_PUSH_PROP
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  2] CBC_PUSH_TRUE
  [  1] CBC_BRANCH_IF_FALSE_FORWARD
  [  2] CBC_PUSH_LITERAL idx:1->ident(a)
  [  2] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_LITERAL idx:5->ident(b)
  [  1] CBC_PUSH_PROP
  [  0] CBC_POP_BLOCK
  [  2] CBC_PUSH_TWO_LITERALS idx:1->ident(a) idx:1->ident(a)
  [  1] CBC_BRANCH_IF_LOGICAL_TRUE
  [  2] CBC_PUSH_LITERAL idx:5->ident(b)
  [  1] CBC_PUSH_PROP
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:6->ident(c)
  [  3] CBC_EXT_FOR_IN_CREATE_CONTEXT
  [  5] CBC_PUSH_TWO_LITERALS idx:1->ident(a) idx:2->string(b)
  [  6] CBC_EXT_FOR_IN_GET_NEXT
  [  3] CBC_ASSIGN
  [  0] CBC_EXT_BRANCH_IF_FOR_IN_HAS_NEXT
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  3] CBC_PUSH_PROP_LITERAL_LITERAL_REFERENCE idx:1->ident(a) idx:2->string(b)
  [  0] CBC_CALL0_PROP_BLOCK
  [  3] CBC_PUSH_THREE_LITERALS idx:1->ident(a) idx:5->ident(b) idx:6->ident(c)
  [  0] CBC_ASSIGN_BLOCK
  [  3] CBC_PUSH_PROP_LITERAL_LITERAL_REFERENCE idx:1->ident(a) idx:2->string(b)
  [  3] CBC_MODULO_RIGHT_LITERAL idx:6->ident(c)
  [  0] CBC_ASSIGN_BLOCK
  [  2] CBC_PUSH_TWO_LITERALS idx:1->ident(a) idx:7->ident(i)
  [  0] CBC_POST_INCR_BLOCK
  [  2] CBC_PUSH_TWO_LITERALS idx:1->ident(a) idx:8->string(j)
  [  0] CBC_PRE_DECR_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 6
  Flags: [small_lit_enc]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 7
  Const literal range end: 9
  Literal range end: 9

   0 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
   2 : CBC_POP_BLOCK
   3 : CBC_PUSH_PROP_LITERAL_LITERAL idx:1(ident)->ident(a) idx:7(lit)->string(b)
   6 : CBC_POP_BLOCK
   7 : CBC_PUSH_PROP_LITERAL_LITERAL idx:1(ident)->ident(a) idx:2(ident)->ident(x)
  10 : CBC_POP_BLOCK
  11 : CBC_PUSH_THREE_LITERALS idx:1(ident)->ident(a) idx:2(ident)->ident(x) idx:3(ident)->ident(y)
  15 : CBC_ADD
  16 : CBC_PUSH_PROP
  17 : CBC_POP_BLOCK
  18 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  20 : CBC_POP_BLOCK
  21 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
  23 : CBC_PUSH_TRUE
  24 : CBC_BRANCH_IF_FALSE_FORWARD offset:6(->30)
  26 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
  28 : CBC_JUMP_FORWARD offset:4(->32)
  30 : CBC_PUSH_LITERAL idx:4(ident)->ident(b)
  32 : CBC_PUSH_PROP
  33 : CBC_POP_BLOCK
  34 : CBC_PUSH_TWO_LITERALS idx:1(ident)->ident(a) idx:1(ident)->ident(a)
  37 : CBC_BRANCH_IF_LOGICAL_TRUE offset:4(->41)
  39 : CBC_PUSH_LITERAL idx:4(ident)->ident(b)
  41 : CBC_PUSH_PROP
  42 : CBC_POP_BLOCK
  43 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  45 : CBC_POP_BLOCK
  46 : CBC_PUSH_LITERAL idx:5(ident)->ident(c)
  48 : CBC_EXT_FOR_IN_CREATE_CONTEXT offset:12(->60)
  51 : CBC_PUSH_TWO_LITERALS idx:1(ident)->ident(a) idx:7(lit)->string(b)
  54 : CBC_EXT_FOR_IN_GET_NEXT
  56 : CBC_ASSIGN
  57 : CBC_EXT_BRANCH_IF_FOR_IN_HAS_NEXT offset:6(->51)
  60 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  62 : CBC_POP_BLOCK
  63 : CBC_PUSH_PROP_LITERAL_LITERAL_REFERENCE idx:1(ident)->ident(a) idx:7(lit)->string(b)
  66 : CBC_CALL0_PROP_BLOCK
  67 : CBC_PUSH_THREE_LITERALS idx:1(ident)->ident(a) idx:4(ident)->ident(b) idx:5(ident)->ident(c)
  71 : CBC_ASSIGN_BLOCK
  72 : CBC_PUSH_PROP_LITERAL_LITERAL_REFERENCE idx:1(ident)->ident(a) idx:7(lit)->string(b)
  75 : CBC_MODULO_RIGHT_LITERAL idx:5(ident)->ident(c)
  77 : CBC_ASSIGN_BLOCK
  78 : CBC_PUSH_TWO_LITERALS idx:1(ident)->ident(a) idx:6(ident)->ident(i)
  81 : CBC_POST_INCR_BLOCK
  82 : CBC_PUSH_TWO_LITERALS idx:1(ident)->ident(a) idx:8(lit)->string(j)
  85 : CBC_PRE_DECR_BLOCK
  86 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  88 : CBC_POP_BLOCK
  89 : CBC_RETURN_WITH_BLOCK

Byte code size: 90 bytes

Script parsing successfully completed. Total byte code size: 90 bytes

--- Script parsing end ---

