
--- Script parsing start ---

  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_ASSIGN_LITERAL_SET_IDENT idx:2->string(0) idx:1->ident(i)
  [  0] CBC_JUMP_FORWARD
  [  3] CBC_PUSH_THREE_LITERALS idx:3->ident(print) idx:4->string(I: ) idx:1->ident(i)
  [  2] CBC_ADD
  [  0] CBC_CALL1_BLOCK
  [  0] CBC_POST_INCR_IDENT idx:1->ident(i)
  [  1] CBC_LESS_TWO_LITERALS idx:1->ident(i) idx:5->string(5)
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:6->ident(a)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:6->ident(a)
  [  0] CBC_BRANCH_IF_LOGICAL_TRUE
  [  1] CBC_PUSH_LITERAL idx:7->ident(b)
  [  0] CBC_BRANCH_IF_FALSE_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_BACKWARD
  [  0] CBC_JUMP_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_BACKWARD
  [  0] CBC_JUMP_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_ASSIGN_LITERAL_SET_IDENT idx:7->ident(b) idx:6->var_ident(a)
  [  0] CBC_ASSIGN_LITERAL_SET_IDENT idx:9->ident(d) idx:8->var_ident(c)
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_IN_TWO_LITERALS idx:7->ident(b) idx:8->var_ident(c)
  [  0] CBC_ASSIGN_SET_IDENT idx:6->var_ident(a)
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_IN_TWO_LITERALS idx:8->var_ident(c) idx:9->ident(d)
  [  0] CBC_POP
  [  1] CBC_IN_TWO_LITERALS idx:7->ident(b) idx:8->var_ident(c)
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  2] CBC_PUSH_TWO_LITERALS idx:1->ident(i) idx:10->ident(j)
  [  0] CBC_CALL1
  [  2] CBC_PUSH_TWO_LITERALS idx:10->ident(j) idx:1->ident(i)
  [  0] CBC_CALL1
  [  0] CBC_POST_INCR_IDENT idx:1->ident(i)
  [  3] CBC_PUSH_THREE_LITERALS idx:10->ident(j) idx:11->ident(k) idx:12->ident(l)
  [  2] CBC_MULTIPLY
  [  1] CBC_ADD
  [  0] CBC_POP
  [  1] CBC_LESS_TWO_LITERALS idx:1->ident(i) idx:10->ident(j)
  [  0] CBC_POP
  [  1] CBC_LESS_TWO_LITERALS idx:10->ident(j) idx:11->ident(k)
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:6->var_ident(a)
  [  0] CBC_POP
  [  1] CBC_PUSH_LITERAL idx:7->ident(b)
  [  0] CBC_POP
  [  0] CBC_ASSIGN_LITERAL_SET_IDENT idx:9->ident(d) idx:8->var_ident(c)
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:6->var_ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_TRUE
  [  1] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_TRUE
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  0] CBC_JUMP_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:6->var_ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_IN_TWO_LITERALS idx:7->ident(b) idx:8->var_ident(c)
  [  1] CBC_JUMP_FORWARD
  [  1] CBC_IN_TWO_LITERALS idx:9->ident(d) idx:13->ident(e)
  [  0] CBC_POP
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_POST_INCR_IDENT_BLOCK idx:14->ident(x)
  [  0] CBC_JUMP_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 3
  Flags: [small_lit_enc]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 12
  Const literal range end: 15
  Literal range end: 15

   0 : CBC_DEFINE_VARS from: 0 to: 1
         idx:0(ident)->var_ident(a)
         idx:1(ident)->var_ident(c)
   2 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
   4 : CBC_POP_BLOCK
   5 : CBC_ASSIGN_LITERAL_SET_IDENT idx:12(lit)->string(0) idx:3(ident)->ident(i)
   8 : CBC_JUMP_FORWARD offset:10(->18)
  10 : CBC_PUSH_THREE_LITERALS idx:4(ident)->ident(print) idx:13(lit)->string(I: ) idx:3(ident)->ident(i)
  14 : CBC_ADD
  15 : CBC_CALL1_BLOCK
  16 : CBC_POST_INCR_IDENT idx:3(ident)->ident(i)
  18 : CBC_LESS_TWO_LITERALS idx:3(ident)->ident(i) idx:14(lit)->string(5)
  21 : CBC_BRANCH_IF_TRUE_BACKWARD offset:11(->10)
  23 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
  25 : CBC_POP_BLOCK
  26 : CBC_JUMP_FORWARD offset:5(->31)
  28 : CBC_PUSH_LITERAL idx:0(ident)->var_ident(a)
  30 : CBC_POP_BLOCK
  31 : CBC_PUSH_LITERAL idx:0(ident)->var_ident(a)
  33 : CBC_BRANCH_IF_LOGICAL_TRUE offset:4(->37)
  35 : CBC_PUSH_LITERAL idx:5(ident)->ident(b)
  37 : CBC_BRANCH_IF_FALSE_BACKWARD offset:9(->28)
  39 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
  41 : CBC_POP_BLOCK
  42 : CBC_JUMP_FORWARD offset:4(->46)
  44 : CBC_JUMP_BACKWARD offset:0(->44)
  46 : CBC_JUMP_BACKWARD offset:2(->44)
  48 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
  50 : CBC_POP_BLOCK
  51 : CBC_JUMP_FORWARD offset:4(->55)
  53 : CBC_JUMP_BACKWARD offset:0(->53)
  55 : CBC_JUMP_BACKWARD offset:2(->53)
  57 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
  59 : CBC_POP_BLOCK
  60 : CBC_ASSIGN_LITERAL_SET_IDENT idx:5(ident)->ident(b) idx:0(ident)->var_ident(a)
  63 : CBC_ASSIGN_LITERAL_SET_IDENT idx:6(ident)->ident(d) idx:1(ident)->var_ident(c)
  66 : CBC_JUMP_FORWARD offset:35(->101)
  68 : CBC_IN_TWO_LITERALS idx:5(ident)->ident(b) idx:1(ident)->var_ident(c)
  71 : CBC_ASSIGN_SET_IDENT idx:0(ident)->var_ident(a)
  73 : CBC_JUMP_FORWARD offset:6(->79)
  75 : CBC_IN_TWO_LITERALS idx:1(ident)->var_ident(c) idx:6(ident)->ident(d)
  78 : CBC_POP
  79 : CBC_IN_TWO_LITERALS idx:5(ident)->ident(b) idx:1(ident)->var_ident(c)
  82 : CBC_BRANCH_IF_TRUE_BACKWARD offset:7(->75)
  84 : CBC_PUSH_TWO_LITERALS idx:3(ident)->ident(i) idx:7(ident)->ident(j)
  87 : CBC_CALL1
  88 : CBC_PUSH_TWO_LITERALS idx:7(ident)->ident(j) idx:3(ident)->ident(i)
  91 : CBC_CALL1
  92 : CBC_POST_INCR_IDENT idx:3(ident)->ident(i)
  94 : CBC_PUSH_THREE_LITERALS idx:7(ident)->ident(j) idx:8(ident)->ident(k) idx:9(ident)->ident(l)
  98 : CBC_MULTIPLY
  99 : CBC_ADD
 100 : CBC_POP
 101 : CBC_LESS_TWO_LITERALS idx:3(ident)->ident(i) idx:7(ident)->ident(j)
 104 : CBC_POP
 105 : CBC_LESS_TWO_LITERALS idx:7(ident)->ident(j) idx:8(ident)->ident(k)
 108 : CBC_BRANCH_IF_TRUE_BACKWARD offset:40(->68)
 110 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
 112 : CBC_POP_BLOCK
 113 : CBC_PUSH_LITERAL idx:0(ident)->var_ident(a)
 115 : CBC_POP
 116 : CBC_PUSH_LITERAL idx:5(ident)->ident(b)
 118 : CBC_POP
 119 : CBC_ASSIGN_LITERAL_SET_IDENT idx:6(ident)->ident(d) idx:1(ident)->var_ident(c)
 122 : CBC_JUMP_FORWARD offset:12(->134)
 124 : CBC_PUSH_LITERAL idx:0(ident)->var_ident(a)
 126 : CBC_BRANCH_IF_FALSE_FORWARD offset:5(->131)
 128 : CBC_PUSH_TRUE
 129 : CBC_JUMP_FORWARD offset:3(->132)
 131 : CBC_PUSH_TRUE
 132 : CBC_BRANCH_IF_TRUE_BACKWARD offset:8(->124)
 134 : CBC_JUMP_BACKWARD offset:10(->124)
 136 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
 138 : CBC_POP_BLOCK
 139 : CBC_PUSH_LITERAL idx:0(ident)->var_ident(a)
 141 : CBC_BRANCH_IF_FALSE_FORWARD offset:7(->148)
 143 : CBC_IN_TWO_LITERALS idx:5(ident)->ident(b) idx:1(ident)->var_ident(c)
 146 : CBC_JUMP_FORWARD offset:5(->151)
 148 : CBC_IN_TWO_LITERALS idx:6(ident)->ident(d) idx:10(ident)->ident(e)
 151 : CBC_POP
 152 : CBC_JUMP_FORWARD offset:4(->156)
 154 : CBC_POST_INCR_IDENT_BLOCK idx:11(ident)->ident(x)
 156 : CBC_JUMP_BACKWARD offset:2(->154)
 158 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
 160 : CBC_POP_BLOCK
 161 : CBC_RETURN_WITH_BLOCK

Byte code size: 162 bytes

Script parsing successfully completed. Total byte code size: 162 bytes

--- Script parsing end ---

