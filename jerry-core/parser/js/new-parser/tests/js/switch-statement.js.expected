
--- Script parsing start ---

  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_MULTIPLY_TWO_LITERALS idx:1->ident(a) idx:2->ident(b)
  [  1] CBC_SUBTRACT_RIGHT_LITERAL idx:3->ident(c)
  [  0] CBC_POP
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:4->ident(x)
  [  0] CBC_POP
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:4->ident(x)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:5->ident(y)
  [  1] CBC_CALL0_PUSH_RESULT
  [  4] CBC_PUSH_THREE_LITERALS idx:1->ident(a) idx:2->ident(b) idx:3->ident(c)
  [  3] CBC_MULTIPLY
  [  2] CBC_ADD
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_LITERAL idx:2->ident(b)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_LITERAL idx:3->ident(c)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  3] CBC_PUSH_TWO_LITERALS idx:6->ident(d) idx:6->ident(d)
  [  3] CBC_CALL0_PUSH_RESULT
  [  2] CBC_ADD
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:5->ident(y)
  [  0] CBC_CALL0_BLOCK
  [  1] CBC_PUSH_LITERAL idx:7->ident(z)
  [  1] CBC_CALL0_PUSH_RESULT
  [  2] CBC_PUSH_LITERAL idx:1->ident(a)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_LITERAL idx:2->ident(b)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:7->ident(z)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:7->ident(z)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_TWO_LITERALS idx:8->ident(n) idx:1->ident(a)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_LITERAL idx:2->ident(b)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_POST_INCR_IDENT_BLOCK idx:1->ident(a)
  [  0] CBC_POST_INCR_IDENT_BLOCK idx:3->ident(c)
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_POST_INCR_IDENT_BLOCK idx:2->ident(b)
  [  1] CBC_PUSH_LITERAL idx:7->ident(z)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:7->ident(z)
  [  0] CBC_CALL0_BLOCK
  [  1] CBC_PUSH_LITERAL idx:5->ident(y)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:5->ident(y)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_TWO_LITERALS idx:5->ident(y) idx:1->ident(a)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_LITERAL idx:2->ident(b)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_LITERAL idx:3->ident(c)
  [  1] CBC_BRANCH_IF_STRICT_EQUAL
  [  2] CBC_PUSH_LITERAL idx:3->ident(c)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  0] CBC_CALL0_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:8->ident(n)
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_FALSE
  [  0] CBC_POP
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_NULL
  [  2] CBC_PUSH_LITERAL idx:1->ident(a)
  [  1] CBC_BRANCH_IF_FALSE_FORWARD
  [  2] CBC_PUSH_LITERAL idx:2->ident(b)
  [  1] CBC_BRANCH_IF_FALSE_FORWARD
  [  3] CBC_PUSH_TWO_LITERALS idx:3->ident(c) idx:8->ident(n)
  [  2] CBC_BRANCH_IF_FALSE_FORWARD
  [  3] CBC_PUSH_TRUE
  [  3] CBC_JUMP_FORWARD
  [  3] CBC_PUSH_FALSE
  [  2] CBC_PUSH_PROP
  [  1] CBC_BRANCH_IF_FALSE_FORWARD
  [  2] CBC_PUSH_FALSE
  [  2] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_TRUE
  [  2] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_LITERAL idx:6->ident(d)
  [  2] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_LITERAL idx:9->ident(e)
  [  1] CBC_STRICT_EQUAL
  [  0] CBC_BRANCH_IF_TRUE_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_POST_INCR_IDENT_BLOCK idx:10->ident(f)
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

--- Function parsing start ---

  [  1] CBC_PUSH_NUMBER_POS_BYTE number:1
  [  0] CBC_POP
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_CREATE_OBJECT
  [  2] CBC_PUSH_NUMBER_0
  [  1] CBC_SET_PROPERTY idx:0->number(0)
  [  0] CBC_RETURN
  [  0] CBC_RETURN_WITH_BLOCK

Final byte code dump:

  Maximum stack depth: 2
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 0
  Const literal range end: 1
  Literal range end: 1

   0 : CBC_PUSH_NUMBER_POS_BYTE number:1
   2 : CBC_POP
   3 : CBC_CREATE_OBJECT
   4 : CBC_PUSH_NUMBER_0
   5 : CBC_SET_PROPERTY idx:0(lit)->number(0)
   7 : CBC_RETURN
   8 : CBC_RETURN_WITH_BLOCK

Byte code size: 9 bytes

--- Function parsing end ---

  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 4
  Flags: [small_lit_enc]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 11
  Const literal range end: 11
  Literal range end: 12

   0 : CBC_INITIALIZE_VAR idx:0(ident)->var_ident(f) idx:11(lit)->function
   3 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
   5 : CBC_POP_BLOCK
   6 : CBC_MULTIPLY_TWO_LITERALS idx:2(ident)->ident(a) idx:3(ident)->ident(b)
   9 : CBC_SUBTRACT_RIGHT_LITERAL idx:4(ident)->ident(c)
  11 : CBC_POP
  12 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
  14 : CBC_POP_BLOCK
  15 : CBC_PUSH_LITERAL idx:5(ident)->ident(x)
  17 : CBC_POP
  18 : CBC_PUSH_LITERAL idx:5(ident)->ident(x)
  20 : CBC_CALL0_BLOCK
  21 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
  23 : CBC_POP_BLOCK
  24 : CBC_PUSH_LITERAL idx:6(ident)->ident(y)
  26 : CBC_CALL0_PUSH_RESULT
  27 : CBC_PUSH_THREE_LITERALS idx:2(ident)->ident(a) idx:3(ident)->ident(b) idx:4(ident)->ident(c)
  31 : CBC_MULTIPLY
  32 : CBC_ADD
  33 : CBC_BRANCH_IF_STRICT_EQUAL offset:20(->53)
  35 : CBC_PUSH_LITERAL idx:3(ident)->ident(b)
  37 : CBC_BRANCH_IF_STRICT_EQUAL offset:76(->113)
  39 : CBC_PUSH_LITERAL idx:4(ident)->ident(c)
  41 : CBC_BRANCH_IF_STRICT_EQUAL offset:72(->113)
  43 : CBC_PUSH_TWO_LITERALS idx:7(ident)->ident(d) idx:7(ident)->ident(d)
  46 : CBC_CALL0_PUSH_RESULT
  47 : CBC_ADD
  48 : CBC_STRICT_EQUAL
  49 : CBC_BRANCH_IF_TRUE_FORWARD offset:67(->116)
  51 : CBC_JUMP_FORWARD offset:65(->116)
  53 : CBC_PUSH_LITERAL idx:6(ident)->ident(y)
  55 : CBC_CALL0_BLOCK
  56 : CBC_PUSH_LITERAL idx:8(ident)->ident(z)
  58 : CBC_CALL0_PUSH_RESULT
  59 : CBC_PUSH_LITERAL idx:2(ident)->ident(a)
  61 : CBC_BRANCH_IF_STRICT_EQUAL offset:12(->73)
  63 : CBC_PUSH_LITERAL idx:3(ident)->ident(b)
  65 : CBC_STRICT_EQUAL
  66 : CBC_BRANCH_IF_TRUE_FORWARD offset:12(->78)
  68 : CBC_PUSH_LITERAL idx:8(ident)->ident(z)
  70 : CBC_CALL0_BLOCK
  71 : CBC_JUMP_FORWARD offset:37(->108)
  73 : CBC_PUSH_LITERAL idx:8(ident)->ident(z)
  75 : CBC_CALL0_BLOCK
  76 : CBC_JUMP_FORWARD offset:32(->108)
  78 : CBC_PUSH_TWO_LITERALS idx:9(ident)->ident(n) idx:2(ident)->ident(a)
  81 : CBC_BRANCH_IF_STRICT_EQUAL offset:9(->90)
  83 : CBC_PUSH_LITERAL idx:3(ident)->ident(b)
  85 : CBC_STRICT_EQUAL
  86 : CBC_BRANCH_IF_TRUE_FORWARD offset:12(->98)
  88 : CBC_JUMP_FORWARD offset:6(->94)
  90 : CBC_JUMP_FORWARD offset:26(->116)
  92 : CBC_POST_INCR_IDENT_BLOCK idx:2(ident)->ident(a)
  94 : CBC_POST_INCR_IDENT_BLOCK idx:4(ident)->ident(c)
  96 : CBC_JUMP_FORWARD offset:4(->100)
  98 : CBC_POST_INCR_IDENT_BLOCK idx:3(ident)->ident(b)
 100 : CBC_PUSH_LITERAL idx:8(ident)->ident(z)
 102 : CBC_CALL0_BLOCK
 103 : CBC_JUMP_FORWARD offset:5(->108)
 105 : CBC_PUSH_LITERAL idx:8(ident)->ident(z)
 107 : CBC_CALL0_BLOCK
 108 : CBC_PUSH_LITERAL idx:6(ident)->ident(y)
 110 : CBC_CALL0_BLOCK
 111 : CBC_JUMP_FORWARD offset:5(->116)
 113 : CBC_PUSH_LITERAL idx:6(ident)->ident(y)
 115 : CBC_CALL0_BLOCK
 116 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
 118 : CBC_POP_BLOCK
 119 : CBC_JUMP_FORWARD offset:31(->150)
 121 : CBC_PUSH_TWO_LITERALS idx:6(ident)->ident(y) idx:2(ident)->ident(a)
 124 : CBC_BRANCH_IF_STRICT_EQUAL offset:15(->139)
 126 : CBC_PUSH_LITERAL idx:3(ident)->ident(b)
 128 : CBC_BRANCH_IF_STRICT_EQUAL offset:11(->139)
 130 : CBC_PUSH_LITERAL idx:4(ident)->ident(c)
 132 : CBC_BRANCH_IF_STRICT_EQUAL offset:12(->144)
 134 : CBC_PUSH_LITERAL idx:4(ident)->ident(c)
 136 : CBC_STRICT_EQUAL
 137 : CBC_BRANCH_IF_TRUE_FORWARD offset:9(->146)
 139 : CBC_PUSH_LITERAL idx:2(ident)->ident(a)
 141 : CBC_CALL0_BLOCK
 142 : CBC_JUMP_FORWARD offset:8(->150)
 144 : CBC_JUMP_FORWARD offset:6(->150)
 146 : CBC_JUMP_FORWARD offset:4(->150)
 148 : CBC_JUMP_FORWARD offset:6(->154)
 150 : CBC_PUSH_LITERAL idx:9(ident)->ident(n)
 152 : CBC_BRANCH_IF_TRUE_BACKWARD offset:31(->121)
 154 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
 156 : CBC_POP_BLOCK
 157 : CBC_PUSH_FALSE
 158 : CBC_POP
 159 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
 161 : CBC_POP_BLOCK
 162 : CBC_PUSH_NULL
 163 : CBC_PUSH_LITERAL idx:2(ident)->ident(a)
 165 : CBC_BRANCH_IF_FALSE_FORWARD offset:28(->193)
 167 : CBC_PUSH_LITERAL idx:3(ident)->ident(b)
 169 : CBC_BRANCH_IF_FALSE_FORWARD offset:20(->189)
 171 : CBC_PUSH_TWO_LITERALS idx:4(ident)->ident(c) idx:9(ident)->ident(n)
 174 : CBC_BRANCH_IF_FALSE_FORWARD offset:5(->179)
 176 : CBC_PUSH_TRUE
 177 : CBC_JUMP_FORWARD offset:3(->180)
 179 : CBC_PUSH_FALSE
 180 : CBC_PUSH_PROP
 181 : CBC_BRANCH_IF_FALSE_FORWARD offset:5(->186)
 183 : CBC_PUSH_FALSE
 184 : CBC_JUMP_FORWARD offset:3(->187)
 186 : CBC_PUSH_TRUE
 187 : CBC_JUMP_FORWARD offset:4(->191)
 189 : CBC_PUSH_LITERAL idx:7(ident)->ident(d)
 191 : CBC_JUMP_FORWARD offset:4(->195)
 193 : CBC_PUSH_LITERAL idx:10(ident)->ident(e)
 195 : CBC_STRICT_EQUAL
 196 : CBC_BRANCH_IF_TRUE_FORWARD offset:4(->200)
 198 : CBC_JUMP_FORWARD offset:4(->202)
 200 : CBC_POST_INCR_IDENT_BLOCK idx:0(ident)->var_ident(f)
 202 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
 204 : CBC_POP_BLOCK
 205 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
 207 : CBC_POP_BLOCK
 208 : CBC_RETURN_WITH_BLOCK

Byte code size: 209 bytes

Script parsing successfully completed. Total byte code size: 218 bytes

--- Script parsing end ---

