
--- Script parsing start ---

  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  1] CBC_NEW0
  [  1] CBC_NEW0
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  2] CBC_PUSH_TWO_LITERALS idx:1->ident(a) idx:2->ident(x)
  [  1] CBC_NEW1
  [  2] CBC_PUSH_LITERAL idx:3->ident(y)
  [  1] CBC_NEW1
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  1] CBC_NEW0
  [  3] CBC_PUSH_TWO_LITERALS idx:2->ident(x) idx:3->ident(y)
  [  1] CBC_NEW byte_arg:2
  [  2] CBC_PUSH_LITERAL idx:4->ident(z)
  [  0] CBC_CALL1_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  1] CBC_NEW0
  [  1] CBC_PUSH_PROP_LITERAL idx:5->string(b)
  [  2] CBC_PUSH_LITERAL idx:6->ident(c)
  [  1] CBC_NEW1
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  1] CBC_NEW0
  [  1] CBC_PUSH_PROP_LITERAL idx:7->ident(b)
  [  2] CBC_PUSH_LITERAL idx:6->ident(c)
  [  1] CBC_NEW1
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  3] CBC_PUSH_THREE_LITERALS idx:1->ident(a) idx:2->ident(x) idx:3->ident(y)
  [  4] CBC_PUSH_LITERAL idx:4->ident(z)
  [  1] CBC_NEW byte_arg:3
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:8->ident(func)
  [  1] CBC_CALL0_PUSH_RESULT
  [  1] CBC_NEW0
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_POST_INCR_IDENT_PUSH_RESULT idx:1->ident(a)
  [  1] CBC_NEW0
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 4
  Flags: [small_lit_enc]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 8
  Const literal range end: 9
  Literal range end: 9

   0 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
   2 : CBC_POP_BLOCK
   3 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
   5 : CBC_NEW0
   6 : CBC_NEW0
   7 : CBC_POP_BLOCK
   8 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  10 : CBC_POP_BLOCK
  11 : CBC_PUSH_TWO_LITERALS idx:1(ident)->ident(a) idx:2(ident)->ident(x)
  14 : CBC_NEW1
  15 : CBC_PUSH_LITERAL idx:3(ident)->ident(y)
  17 : CBC_NEW1
  18 : CBC_POP_BLOCK
  19 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  21 : CBC_POP_BLOCK
  22 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
  24 : CBC_NEW0
  25 : CBC_PUSH_TWO_LITERALS idx:2(ident)->ident(x) idx:3(ident)->ident(y)
  28 : CBC_NEW byte_arg:2
  30 : CBC_PUSH_LITERAL idx:4(ident)->ident(z)
  32 : CBC_CALL1_BLOCK
  33 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  35 : CBC_POP_BLOCK
  36 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
  38 : CBC_NEW0
  39 : CBC_PUSH_PROP_LITERAL idx:8(lit)->string(b)
  41 : CBC_PUSH_LITERAL idx:5(ident)->ident(c)
  43 : CBC_NEW1
  44 : CBC_POP_BLOCK
  45 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  47 : CBC_POP_BLOCK
  48 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
  50 : CBC_NEW0
  51 : CBC_PUSH_PROP_LITERAL idx:6(ident)->ident(b)
  53 : CBC_PUSH_LITERAL idx:5(ident)->ident(c)
  55 : CBC_NEW1
  56 : CBC_POP_BLOCK
  57 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  59 : CBC_POP_BLOCK
  60 : CBC_PUSH_THREE_LITERALS idx:1(ident)->ident(a) idx:2(ident)->ident(x) idx:3(ident)->ident(y)
  64 : CBC_PUSH_LITERAL idx:4(ident)->ident(z)
  66 : CBC_NEW byte_arg:3
  68 : CBC_POP_BLOCK
  69 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  71 : CBC_POP_BLOCK
  72 : CBC_PUSH_LITERAL idx:7(ident)->ident(func)
  74 : CBC_CALL0_PUSH_RESULT
  75 : CBC_NEW0
  76 : CBC_POP_BLOCK
  77 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  79 : CBC_POP_BLOCK
  80 : CBC_POST_INCR_IDENT_PUSH_RESULT idx:1(ident)->ident(a)
  82 : CBC_NEW0
  83 : CBC_POP_BLOCK
  84 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  86 : CBC_POP_BLOCK
  87 : CBC_RETURN_WITH_BLOCK

Byte code size: 88 bytes

Script parsing successfully completed. Total byte code size: 88 bytes

--- Script parsing end ---

