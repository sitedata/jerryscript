
--- Script parsing start ---

  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  2] CBC_PUSH_TWO_LITERALS idx:2->ident(print) idx:3->string(text)
  [  0] CBC_CALL1_BLOCK
  [  0] CBC_JUMP_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  0] CBC_BRANCH_IF_LOGICAL_FALSE
  [  1] CBC_PUSH_LITERAL idx:4->ident(b)
  [  0] CBC_BRANCH_IF_FALSE_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:5->ident(x)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:4->ident(b)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_TRUE
  [  1] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_TRUE
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:1->ident(a)
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_FALSE
  [  0] CBC_BRANCH_IF_TRUE_BACKWARD
  [  1] CBC_PUSH_LITERAL idx:6->ident(y)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 2
  Flags: [small_lit_enc]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 6
  Const literal range end: 7
  Literal range end: 7

   0 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
   2 : CBC_POP_BLOCK
   3 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
   5 : CBC_BRANCH_IF_TRUE_BACKWARD offset:2(->3)
   7 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
   9 : CBC_POP_BLOCK
  10 : CBC_JUMP_FORWARD offset:10(->20)
  12 : CBC_JUMP_FORWARD offset:6(->18)
  14 : CBC_PUSH_TWO_LITERALS idx:2(ident)->ident(print) idx:6(lit)->string(text)
  17 : CBC_CALL1_BLOCK
  18 : CBC_JUMP_BACKWARD offset:4(->14)
  20 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
  22 : CBC_BRANCH_IF_LOGICAL_FALSE offset:4(->26)
  24 : CBC_PUSH_LITERAL idx:3(ident)->ident(b)
  26 : CBC_BRANCH_IF_FALSE_BACKWARD offset:14(->12)
  28 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  30 : CBC_POP_BLOCK
  31 : CBC_JUMP_FORWARD offset:23(->54)
  33 : CBC_JUMP_FORWARD offset:17(->50)
  35 : CBC_JUMP_FORWARD offset:5(->40)
  37 : CBC_PUSH_LITERAL idx:4(ident)->ident(x)
  39 : CBC_POP_BLOCK
  40 : CBC_PUSH_LITERAL idx:3(ident)->ident(b)
  42 : CBC_BRANCH_IF_FALSE_FORWARD offset:5(->47)
  44 : CBC_PUSH_TRUE
  45 : CBC_JUMP_FORWARD offset:3(->48)
  47 : CBC_PUSH_TRUE
  48 : CBC_BRANCH_IF_TRUE_BACKWARD offset:11(->37)
  50 : CBC_PUSH_LITERAL idx:1(ident)->ident(a)
  52 : CBC_BRANCH_IF_TRUE_BACKWARD offset:17(->35)
  54 : CBC_PUSH_FALSE
  55 : CBC_BRANCH_IF_TRUE_BACKWARD offset:22(->33)
  57 : CBC_PUSH_LITERAL idx:5(ident)->ident(y)
  59 : CBC_POP_BLOCK
  60 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  62 : CBC_POP_BLOCK
  63 : CBC_RETURN_WITH_BLOCK

Byte code size: 64 bytes

Script parsing successfully completed. Total byte code size: 64 bytes

--- Script parsing end ---

