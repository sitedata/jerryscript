
--- Script parsing start ---

  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

--- Function parsing start ---

  [  0] CBC_RETURN_WITH_LITERAL idx:0->ident(g)

Final byte code dump:

  Maximum stack depth: 0
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 1
  Const literal range end: 1
  Literal range end: 1

   0 : CBC_RETURN_WITH_LITERAL idx:0(ident)->ident(g)

Byte code size: 2 bytes

--- Function parsing end ---

  [  1] CBC_EXT_PUSH_NAMED_FUNC_EXPRESSION idx:2->function idx:1->string(g)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

--- Function parsing start ---

  [  0] CBC_RETURN_WITH_LITERAL idx:0->var_ident(f)

Final byte code dump:

  Maximum stack depth: 1
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 1
  Register range end: 1
  Identifier range end: 1
  Const literal range end: 1
  Literal range end: 1

   0 : CBC_RETURN_WITH_LITERAL idx:0(arg)->var_ident(f)

Byte code size: 2 bytes

--- Function parsing end ---

  [  1] CBC_EXT_PUSH_NAMED_FUNC_EXPRESSION idx:4->function idx:3->string(f)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

--- Function parsing start ---

  Note: legacy (non-strict) argument definition

  [  1] CBC_ADD_TWO_LITERALS idx:1->var_ident(a) idx:2->var_ident(f)
  [  0] CBC_RETURN

Final byte code dump:

  Maximum stack depth: 4
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 3
  Register range end: 3
  Identifier range end: 3
  Const literal range end: 3
  Literal range end: 3

   0 : CBC_ADD_TWO_LITERALS idx:1(arg)->var_ident(a) idx:2(arg)->var_ident(f)
   3 : CBC_RETURN

Byte code size: 4 bytes

--- Function parsing end ---

  [  1] CBC_EXT_PUSH_NAMED_FUNC_EXPRESSION idx:5->function idx:3->string(f)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

--- Function parsing start ---


--- Function parsing start ---


Final byte code dump:

  Maximum stack depth: 0
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 0
  Const literal range end: 0
  Literal range end: 0

   0 : CBC_RETURN_WITH_BLOCK

Byte code size: 1 bytes

--- Function parsing end ---


--- Function parsing start ---


Final byte code dump:

  Maximum stack depth: 0
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 0
  Const literal range end: 0
  Literal range end: 0

   0 : CBC_RETURN_WITH_BLOCK

Byte code size: 1 bytes

--- Function parsing end ---

  [  1] CBC_MULTIPLY_TWO_LITERALS idx:1->var_ident(f) idx:0->var_ident(x)
  [  0] CBC_RETURN

Final byte code dump:

  Maximum stack depth: 3
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 1
  Register range end: 2
  Identifier range end: 2
  Const literal range end: 2
  Literal range end: 3

   0 : CBC_INITIALIZE_VAR idx:1(reg)->var_ident(f) idx:2(lit)->function
   3 : CBC_MULTIPLY_TWO_LITERALS idx:1(reg)->var_ident(f) idx:0(arg)->var_ident(x)
   6 : CBC_RETURN

Byte code size: 7 bytes

--- Function parsing end ---

  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

--- Function parsing start ---


--- Function parsing start ---


Final byte code dump:

  Maximum stack depth: 0
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 0
  Const literal range end: 0
  Literal range end: 0

   0 : CBC_RETURN_WITH_BLOCK

Byte code size: 1 bytes

--- Function parsing end ---


--- Function parsing start ---


Final byte code dump:

  Maximum stack depth: 0
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 0
  Const literal range end: 0
  Literal range end: 0

   0 : CBC_RETURN_WITH_BLOCK

Byte code size: 1 bytes

--- Function parsing end ---


--- Function parsing start ---


Final byte code dump:

  Maximum stack depth: 0
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 0
  Const literal range end: 0
  Literal range end: 0

   0 : CBC_RETURN_WITH_BLOCK

Byte code size: 1 bytes

--- Function parsing end ---

  [  1] CBC_ADD_TWO_LITERALS idx:4->var_ident(a) idx:2->var_ident(g)
  [  0] CBC_RETURN

Final byte code dump:

  Maximum stack depth: 5
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 2
  Register range end: 4
  Identifier range end: 4
  Const literal range end: 4
  Literal range end: 6

   0 : CBC_INITIALIZE_VAR idx:2(reg)->var_ident(g) idx:4(lit)->function
   3 : CBC_INITIALIZE_VAR idx:3(reg)->var_ident(a) idx:5(lit)->function
   6 : CBC_ADD_TWO_LITERALS idx:3(reg)->var_ident(a) idx:2(reg)->var_ident(g)
   9 : CBC_RETURN

Byte code size: 10 bytes

--- Function parsing end ---

  [  1] CBC_EXT_PUSH_NAMED_FUNC_EXPRESSION idx:8->function idx:1->string(g)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

--- Function parsing start ---


--- Function parsing start ---


Final byte code dump:

  Maximum stack depth: 0
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 0
  Const literal range end: 0
  Literal range end: 0

   0 : CBC_RETURN_WITH_BLOCK

Byte code size: 1 bytes

--- Function parsing end ---


--- Function parsing start ---


Final byte code dump:

  Maximum stack depth: 0
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 0
  Const literal range end: 0
  Literal range end: 0

   0 : CBC_RETURN_WITH_BLOCK

Byte code size: 1 bytes

--- Function parsing end ---

  [  1] CBC_ADD_TWO_LITERALS idx:3->var_ident(f) idx:1->var_ident(g)
  [  0] CBC_RETURN

Final byte code dump:

  Maximum stack depth: 3
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 0
  Register range end: 2
  Identifier range end: 2
  Const literal range end: 2
  Literal range end: 4

   0 : CBC_INITIALIZE_VAR idx:0(reg)->var_ident(g) idx:2(lit)->function
   3 : CBC_INITIALIZE_VAR idx:1(reg)->var_ident(f) idx:3(lit)->function
   6 : CBC_ADD_TWO_LITERALS idx:1(reg)->var_ident(f) idx:0(reg)->var_ident(g)
   9 : CBC_RETURN

Byte code size: 10 bytes

--- Function parsing end ---

  [  1] CBC_EXT_PUSH_NAMED_FUNC_EXPRESSION idx:10->function idx:9->string(m)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

--- Function parsing start ---

  [  1] CBC_PUSH_NUMBER_POS_BYTE number:5
  [  0] CBC_ASSIGN_SET_IDENT idx:0->var_ident(a1)
  [  1] CBC_PUSH_NUMBER_POS_BYTE number:5
  [  0] CBC_ASSIGN_SET_IDENT idx:1->var_ident(a2)
  [  1] CBC_PUSH_NUMBER_POS_BYTE number:5
  [  0] CBC_ASSIGN_SET_IDENT idx:2->var_ident(a3)

--- Function parsing start ---


Final byte code dump:

  Maximum stack depth: 0
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 0
  Const literal range end: 0
  Literal range end: 0

   0 : CBC_RETURN_WITH_BLOCK

Byte code size: 1 bytes

--- Function parsing end ---


--- Function parsing start ---


Final byte code dump:

  Maximum stack depth: 0
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 0
  Const literal range end: 0
  Literal range end: 0

   0 : CBC_RETURN_WITH_BLOCK

Byte code size: 1 bytes

--- Function parsing end ---


--- Function parsing start ---


Final byte code dump:

  Maximum stack depth: 0
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 0
  Const literal range end: 0
  Literal range end: 0

   0 : CBC_RETURN_WITH_BLOCK

Byte code size: 1 bytes

--- Function parsing end ---


Final byte code dump:

  Maximum stack depth: 4
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 0
  Register range end: 3
  Identifier range end: 3
  Const literal range end: 3
  Literal range end: 6

   0 : CBC_INITIALIZE_VAR idx:0(reg)->var_ident(a1) idx:3(lit)->function
   3 : CBC_INITIALIZE_VAR idx:1(reg)->var_ident(a2) idx:4(lit)->function
   6 : CBC_INITIALIZE_VAR idx:2(reg)->var_ident(a3) idx:5(lit)->function
   9 : CBC_PUSH_NUMBER_POS_BYTE number:5
  11 : CBC_ASSIGN_SET_IDENT idx:0(reg)->var_ident(a1)
  13 : CBC_PUSH_NUMBER_POS_BYTE number:5
  15 : CBC_ASSIGN_SET_IDENT idx:1(reg)->var_ident(a2)
  17 : CBC_PUSH_NUMBER_POS_BYTE number:5
  19 : CBC_ASSIGN_SET_IDENT idx:2(reg)->var_ident(a3)
  21 : CBC_RETURN_WITH_BLOCK

Byte code size: 22 bytes

--- Function parsing end ---

  [  1] CBC_PUSH_LITERAL idx:11->function
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 1
  Flags: [small_lit_enc]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 2
  Const literal range end: 5
  Literal range end: 12

   0 : CBC_INITIALIZE_VAR idx:0(ident)->var_ident(f) idx:8(lit)->function
   3 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
   5 : CBC_POP_BLOCK
   6 : CBC_EXT_PUSH_NAMED_FUNC_EXPRESSION idx:5(lit)->function idx:2(lit)->string(g)
  10 : CBC_POP_BLOCK
  11 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
  13 : CBC_POP_BLOCK
  14 : CBC_EXT_PUSH_NAMED_FUNC_EXPRESSION idx:6(lit)->function idx:3(lit)->string(f)
  18 : CBC_POP_BLOCK
  19 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
  21 : CBC_POP_BLOCK
  22 : CBC_EXT_PUSH_NAMED_FUNC_EXPRESSION idx:7(lit)->function idx:3(lit)->string(f)
  26 : CBC_POP_BLOCK
  27 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
  29 : CBC_POP_BLOCK
  30 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
  32 : CBC_POP_BLOCK
  33 : CBC_EXT_PUSH_NAMED_FUNC_EXPRESSION idx:9(lit)->function idx:2(lit)->string(g)
  37 : CBC_POP_BLOCK
  38 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
  40 : CBC_POP_BLOCK
  41 : CBC_EXT_PUSH_NAMED_FUNC_EXPRESSION idx:10(lit)->function idx:4(lit)->string(m)
  45 : CBC_POP_BLOCK
  46 : CBC_PUSH_LITERAL idx:1(ident)->ident(next_statement)
  48 : CBC_POP_BLOCK
  49 : CBC_PUSH_LITERAL idx:11(lit)->function
  51 : CBC_POP_BLOCK
  52 : CBC_RETURN_WITH_BLOCK

Byte code size: 53 bytes

Script parsing successfully completed. Total byte code size: 120 bytes

--- Script parsing end ---

