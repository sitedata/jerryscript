
--- Script parsing start ---

  [  1] CBC_PUSH_NUMBER_0
  [  0] CBC_POP
  [  0] CBC_JUMP_FORWARD
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

--- Function parsing start ---

  [  1] CBC_PUSH_UNDEFINED
  [  1] CBC_STRICT_EQUAL_RIGHT_LITERAL idx:0->var_ident(a)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_NUMBER_POS_BYTE number:5
  [  0] CBC_ASSIGN_SET_IDENT idx:0->var_ident(a)
  [  1] CBC_PUSH_UNDEFINED
  [  1] CBC_STRICT_EQUAL_RIGHT_LITERAL idx:1->var_ident(b)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  3] CBC_PUSH_PROP_LITERAL_LITERAL_REFERENCE idx:2->ident(Math) idx:3->string(cos)
  [  4] CBC_PUSH_NUMBER_0
  [  1] CBC_CALL1_PROP_PUSH_RESULT
  [  0] CBC_ASSIGN_SET_IDENT idx:1->var_ident(b)

Final byte code dump:

  Maximum stack depth: 6
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 2
  Register range end: 2
  Identifier range end: 3
  Const literal range end: 4
  Literal range end: 4

   0 : CBC_PUSH_UNDEFINED
   1 : CBC_STRICT_EQUAL_RIGHT_LITERAL idx:0(arg)->var_ident(a)
   3 : CBC_BRANCH_IF_FALSE_FORWARD offset:6(->9)
   5 : CBC_PUSH_NUMBER_POS_BYTE number:5
   7 : CBC_ASSIGN_SET_IDENT idx:0(arg)->var_ident(a)
   9 : CBC_PUSH_UNDEFINED
  10 : CBC_STRICT_EQUAL_RIGHT_LITERAL idx:1(arg)->var_ident(b)
  12 : CBC_BRANCH_IF_FALSE_FORWARD offset:9(->21)
  14 : CBC_PUSH_PROP_LITERAL_LITERAL_REFERENCE idx:2(ident)->ident(Math) idx:3(lit)->string(cos)
  17 : CBC_PUSH_NUMBER_0
  18 : CBC_CALL1_PROP_PUSH_RESULT
  19 : CBC_ASSIGN_SET_IDENT idx:1(arg)->var_ident(b)
  21 : CBC_RETURN_WITH_BLOCK

Byte code size: 22 bytes

--- Function parsing end ---

  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_CREATE_OBJECT

--- Function parsing start ---

  [  1] CBC_PUSH_UNDEFINED
  [  1] CBC_STRICT_EQUAL_RIGHT_LITERAL idx:1->var_ident(b)
  [  0] CBC_BRANCH_IF_FALSE_FORWARD
  [  1] CBC_PUSH_NUMBER_POS_BYTE number:1
  [  0] CBC_POP
  [  1] CBC_PUSH_NUMBER_POS_BYTE number:2
  [  0] CBC_ASSIGN_SET_IDENT idx:1->var_ident(b)

Final byte code dump:

  Maximum stack depth: 4
  Flags: [small_lit_enc,no_lexical_env]
  Argument range end: 3
  Register range end: 3
  Identifier range end: 3
  Const literal range end: 3
  Literal range end: 3

   0 : CBC_PUSH_UNDEFINED
   1 : CBC_STRICT_EQUAL_RIGHT_LITERAL idx:1(arg)->var_ident(b)
   3 : CBC_BRANCH_IF_FALSE_FORWARD offset:9(->12)
   5 : CBC_PUSH_NUMBER_POS_BYTE number:1
   7 : CBC_POP
   8 : CBC_PUSH_NUMBER_POS_BYTE number:2
  10 : CBC_ASSIGN_SET_IDENT idx:1(arg)->var_ident(b)
  12 : CBC_RETURN_WITH_BLOCK

Byte code size: 13 bytes

--- Function parsing end ---

  [  1] CBC_SET_LITERAL_PROPERTY idx:5->function idx:4->string(f)
  [  2] CBC_PUSH_NUMBER_POS_BYTE number:5
  [  1] CBC_SET_PROPERTY idx:6->string(g)
  [  0] CBC_ASSIGN_SET_IDENT idx:3->var_ident(o)
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 2
  Flags: [small_lit_enc]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 3
  Const literal range end: 5
  Literal range end: 7

   0 : CBC_DEFINE_VARS from: 0 to: 0
         idx:0(ident)->var_ident(o)
   2 : CBC_INITIALIZE_VAR idx:1(ident)->var_ident(f) idx:5(lit)->function
   5 : CBC_PUSH_NUMBER_0
   6 : CBC_POP
   7 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
   9 : CBC_POP_BLOCK
  10 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
  12 : CBC_POP_BLOCK
  13 : CBC_CREATE_OBJECT
  14 : CBC_SET_LITERAL_PROPERTY idx:6(lit)->function idx:3(lit)->string(f)
  17 : CBC_PUSH_NUMBER_POS_BYTE number:5
  19 : CBC_SET_PROPERTY idx:4(lit)->string(g)
  21 : CBC_ASSIGN_SET_IDENT idx:0(ident)->var_ident(o)
  23 : CBC_PUSH_LITERAL idx:2(ident)->ident(next_statement)
  25 : CBC_POP_BLOCK
  26 : CBC_RETURN_WITH_BLOCK

Byte code size: 27 bytes

Script parsing successfully completed. Total byte code size: 62 bytes

--- Script parsing end ---

