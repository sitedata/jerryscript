
--- Script parsing start ---

  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:1->ident(f)
  [  1] CBC_CALL0_PUSH_RESULT
  [  3] CBC_PUSH_PROP_LITERAL_REFERENCE idx:2->string(a)
  [  0] CBC_CALL0_PROP_BLOCK
  [  2] CBC_PUSH_TWO_LITERALS idx:3->ident(a) idx:4->string(b)
  [  0] CBC_POST_INCR_BLOCK
  [  0] CBC_PRE_DECR_IDENT_BLOCK idx:3->ident(a)
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:5->ident(x)
  [  0] CBC_POP
  [  1] CBC_PUSH_LITERAL idx:1->ident(f)
  [  1] CBC_CALL0_PUSH_RESULT
  [  1] CBC_PUSH_PROP_LITERAL idx:2->string(a)
  [  0] CBC_CALL0_BLOCK
  [  1] CBC_PUSH_LITERAL idx:5->ident(x)
  [  0] CBC_POP
  [  1] CBC_PUSH_PROP_LITERAL_LITERAL idx:3->ident(a) idx:4->string(b)
  [  2] CBC_EXT_THROW_REFERENCE_ERROR
  [  0] CBC_POST_INCR_BLOCK
  [  1] CBC_PUSH_LITERAL idx:3->ident(a)
  [  0] CBC_POP
  [  1] CBC_PUSH_LITERAL idx:6->ident(b)
  [  2] CBC_EXT_THROW_REFERENCE_ERROR
  [  0] CBC_PRE_DECR_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:3->ident(a)
  [  0] CBC_POP
  [  1] CBC_PUSH_LITERAL idx:6->ident(b)
  [  0] CBC_POP
  [  1] CBC_PUSH_PROP_LITERAL_LITERAL idx:7->ident(c) idx:8->string(d)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_LITERAL idx:5->ident(x)
  [  1] CBC_EXT_WITH_CREATE_CONTEXT
  [  2] CBC_PUSH_LITERAL idx:3->ident(a)
  [  1] CBC_POP
  [  2] CBC_PUSH_LITERAL idx:6->ident(b)
  [  1] CBC_CALL0_BLOCK
  [  0] CBC_CONTEXT_END
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_NUMBER_POS_BYTE number:5
  [  0] CBC_ASSIGN_SET_IDENT idx:3->ident(a)
  [  1] CBC_PUSH_NUMBER_POS_BYTE number:6
  [  1] CBC_ASSIGN_SET_IDENT_PUSH_RESULT idx:6->ident(b)
  [  1] CBC_EQUAL_RIGHT_LITERAL idx:9->number(6)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_NUMBER_POS_BYTE number:5
  [  0] CBC_ASSIGN_SET_IDENT idx:3->ident(a)
  [  1] CBC_PUSH_NUMBER_POS_BYTE number:6
  [  1] CBC_ASSIGN_SET_IDENT_PUSH_RESULT idx:6->ident(b)
  [  0] CBC_POP_BLOCK
  [  1] CBC_PUSH_NUMBER_POS_BYTE number:5
  [  0] CBC_ASSIGN_SET_IDENT idx:3->ident(a)
  [  1] CBC_PUSH_NUMBER_POS_BYTE number:6
  [  0] CBC_ASSIGN_SET_IDENT_BLOCK idx:6->ident(b)
  [  1] CBC_PUSH_LITERAL idx:0->ident(next_statement)
  [  0] CBC_POP_BLOCK

Final byte code dump:

  Maximum stack depth: 3
  Flags: [small_lit_enc]
  Argument range end: 0
  Register range end: 0
  Identifier range end: 6
  Const literal range end: 10
  Literal range end: 10

   0 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
   2 : CBC_POP_BLOCK
   3 : CBC_PUSH_LITERAL idx:1(ident)->ident(f)
   5 : CBC_CALL0_PUSH_RESULT
   6 : CBC_PUSH_PROP_LITERAL_REFERENCE idx:6(lit)->string(a)
   8 : CBC_CALL0_PROP_BLOCK
   9 : CBC_PUSH_TWO_LITERALS idx:2(ident)->ident(a) idx:7(lit)->string(b)
  12 : CBC_POST_INCR_BLOCK
  13 : CBC_PRE_DECR_IDENT_BLOCK idx:2(ident)->ident(a)
  15 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  17 : CBC_POP_BLOCK
  18 : CBC_PUSH_LITERAL idx:3(ident)->ident(x)
  20 : CBC_POP
  21 : CBC_PUSH_LITERAL idx:1(ident)->ident(f)
  23 : CBC_CALL0_PUSH_RESULT
  24 : CBC_PUSH_PROP_LITERAL idx:6(lit)->string(a)
  26 : CBC_CALL0_BLOCK
  27 : CBC_PUSH_LITERAL idx:3(ident)->ident(x)
  29 : CBC_POP
  30 : CBC_PUSH_PROP_LITERAL_LITERAL idx:2(ident)->ident(a) idx:7(lit)->string(b)
  33 : CBC_EXT_THROW_REFERENCE_ERROR
  35 : CBC_POST_INCR_BLOCK
  36 : CBC_PUSH_LITERAL idx:2(ident)->ident(a)
  38 : CBC_POP
  39 : CBC_PUSH_LITERAL idx:4(ident)->ident(b)
  41 : CBC_EXT_THROW_REFERENCE_ERROR
  43 : CBC_PRE_DECR_BLOCK
  44 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  46 : CBC_POP_BLOCK
  47 : CBC_PUSH_LITERAL idx:2(ident)->ident(a)
  49 : CBC_POP
  50 : CBC_PUSH_LITERAL idx:4(ident)->ident(b)
  52 : CBC_POP
  53 : CBC_PUSH_PROP_LITERAL_LITERAL idx:5(ident)->ident(c) idx:8(lit)->string(d)
  56 : CBC_POP_BLOCK
  57 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  59 : CBC_POP_BLOCK
  60 : CBC_PUSH_LITERAL idx:3(ident)->ident(x)
  62 : CBC_EXT_WITH_CREATE_CONTEXT offset:10(->72)
  65 : CBC_PUSH_LITERAL idx:2(ident)->ident(a)
  67 : CBC_POP
  68 : CBC_PUSH_LITERAL idx:4(ident)->ident(b)
  70 : CBC_CALL0_BLOCK
  71 : CBC_CONTEXT_END
  72 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
  74 : CBC_POP_BLOCK
  75 : CBC_PUSH_NUMBER_POS_BYTE number:5
  77 : CBC_ASSIGN_SET_IDENT idx:2(ident)->ident(a)
  79 : CBC_PUSH_NUMBER_POS_BYTE number:6
  81 : CBC_ASSIGN_SET_IDENT_PUSH_RESULT idx:4(ident)->ident(b)
  83 : CBC_EQUAL_RIGHT_LITERAL idx:9(lit)->number(6)
  85 : CBC_POP_BLOCK
  86 : CBC_PUSH_NUMBER_POS_BYTE number:5
  88 : CBC_ASSIGN_SET_IDENT idx:2(ident)->ident(a)
  90 : CBC_PUSH_NUMBER_POS_BYTE number:6
  92 : CBC_ASSIGN_SET_IDENT_PUSH_RESULT idx:4(ident)->ident(b)
  94 : CBC_POP_BLOCK
  95 : CBC_PUSH_NUMBER_POS_BYTE number:5
  97 : CBC_ASSIGN_SET_IDENT idx:2(ident)->ident(a)
  99 : CBC_PUSH_NUMBER_POS_BYTE number:6
 101 : CBC_ASSIGN_SET_IDENT_BLOCK idx:4(ident)->ident(b)
 103 : CBC_PUSH_LITERAL idx:0(ident)->ident(next_statement)
 105 : CBC_POP_BLOCK
 106 : CBC_RETURN_WITH_BLOCK

Byte code size: 107 bytes

Script parsing successfully completed. Total byte code size: 107 bytes

--- Script parsing end ---

